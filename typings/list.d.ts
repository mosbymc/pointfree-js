interface list<> {
    apply(l: list): list;
    chain(fn: (x: any) => list): list;
    concat(ys: Iterable): list;
    concatAll(...ys: Array<Iterable>): list;
    contramap(fn: (x: any) => any): list;
    copyWithin(index: number): list;
    copyWithin(index: number, start: number): list;
    copyWithin(index: number, start: number, end: number): list;
    dimap(f: (x: any) => any, g: (x: any) => any): list;
    distinct(): list;
    distinct(comparer: (x: any, y: any) => boolean): list;
    except(xs: Iterable): list;
    except(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    fill(value: any): list;
    fill(value: any, start: number): list;
    fill(value: any, start: number, end: number): list;
    filter(predicate: (x: any) => boolean): list;
    groupBy(keySelector: (x: any) => any): list;
    groupBy(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): list;
    groupByDescending(keySelector: (x: any) => any): list;
    groupByDescending(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): list;
    groupJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any): list;
    groupJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any, comparer: (x: any, y: any) => boolean): list;
    head(): list;
    intersect(xs: Iterable): list;
    intersect(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    intersperse(val: any): list;
    listJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any): list;
    listJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any, comparer: (x: any, y: any) => boolean): list;
    map(fn: (x: any) => any): list;
    join(): list;
    ofType(type: string): list;
    ofType(type: {}): list;
    pop(): list;
    prepend(xs: Iterable): list;
    prependAll(...xs: Array<Iterable>): list;
    push(...items: Array<any>): list;
    reverse(): list;
    shift(): list;
    skip(amt: number): list;
    skipWhile(predicate: (x: any) => boolean): list;
    slice(start: number): list;
    slice(start: number, end: number): list;
    sortBy(): ordered_list;
    sortBy(keySelector: (x: any) => any): ordered_list;
    sortBy(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): ordered_list;
    sortByDescending(): ordered_list;
    sortByDescending(keySelector: (x: any) => any): ordered_list;
    sortByDescending(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): ordered_list;
    splice(start: number): list;
    splice(start: number, end: number): list;
    tail(): list;
    take(amt: number): list;
    takeWhile(predicate: (x: any) => boolean): list;
    union(xs: Iterable): list;
    union(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    unshift(...xs: Array<any>): list;
    zip(selector: (x: any) => any, xs: Iterable): list;
    all(): boolean;
    all(predicate: (x: any) => boolean): boolean;
    any(): boolean;
    any(predicate: (x: any) => boolean): boolean;
    contains(val: any): boolean;
    contains(val: any, comparer: (x: any, y: any) => boolean): boolean;
    count(): number;
    count(predicate: (x: any) => boolean): number;
    equals(f: list, comparer: (x: any, y: any) => boolean): boolean;
    findIndex(comparer: (x: any) => boolean): number;
    findLastIndex(comparer: (x: any) => boolean): number;
    first(): any;
    first(predicate: (x: any) => boolean): any;
    foldl(fn: (x: any, accumulator: any) => any, acc: any): any;
    foldr(fn: (x: any, accumulator: any) => any, acc: any): any;
    forEach(fn: (x: any) => void): this;
    indexOf(val: any): number;
    isEmpty(): boolean;
    arrayJoin(): string;
    arrayJoin(delimiter: string): string;
    last(): any;
    last(predicate: (x: any) => boolean): any;
    reduceRight(fn: (x: any, accumulator: any) => any): any;
    reduceRight(fn: (x: any, accumulator: any) => any, acc: any): any;
    toArray(): Array;
    toEvaluatedList(): list;
    toMap(): Map;
    toSet(): Set;
    toString(): string;
    toLocaleString(): string;
    toJSON(): string;
    set(idx: number, val: any): list;
    get(idx: number): any;
    factory: List;
    data: Array;
    extract: Array;
}

interface ordered_list<> {
    apply(l: list): list;
    chain(fn: (x: any) => list): list;
    concat(ys: Iterable): list;
    concatAll(...ys: Array<Iterable>): list;
    contramap(fn: (x: any) => any): list;
    copyWithin(index: number): list;
    copyWithin(index: number, start: number): list;
    copyWithin(index: number, start: number, end: number): list;
    dimap(f: (x: any) => any, g: (x: any) => any): list;
    distinct(): list;
    distinct(comparer: (x: any, y: any) => boolean): list;
    except(xs: Iterable): list;
    except(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    fill(value: any): list;
    fill(value: any, start: number): list;
    fill(value: any, start: number, end: number): list;
    filter(predicate: (x: any) => boolean): list;
    groupBy(keySelector: (x: any) => any): list;
    groupBy(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): list;
    groupByDescending(keySelector: (x: any) => any): list;
    groupByDescending(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): list;
    groupJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any): list;
    groupJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any, comparer: (x: any, y: any) => boolean): list;
    head(): list;
    intersect(xs: Iterable): list;
    intersect(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    intersperse(val: any): list;
    listJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any): list;
    listJoin(ys: Iterable, xSelector: (x: any) => any, ySelector: (y: any) => any, projector: (x: any, y: any) => any, comparer: (x: any, y: any) => boolean): list;
    map(fn: (x: any) => any): list;
    join(): list;
    ofType(type: string): list;
    ofType(type: {}): list;
    pop(): list;
    prepend(xs: Iterable): list;
    prependAll(...xs: Array<Iterable>): list;
    push(...items: Array<any>): list;
    reverse(): list;
    shift(): list;
    skip(amt: number): list;
    skipWhile(predicate: (x: any) => boolean): list;
    slice(start: number): list;
    slice(start: number, end: number): list;
    thenBy(): ordered_list;
    thenBy(keySelector: (x: any) => any): ordered_list;
    thenBy(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): ordered_list;
    thenByDescending(): ordered_list;
    thenByDescending(keySelector: (x: any) => any): ordered_list;
    thenByDescending(keySelector: (x: any) => any, comparer: (x: any, y: any) => boolean): ordered_list;
    splice(start: number): list;
    splice(start: number, end: number): list;
    tail(): list;
    take(amt: number): list;
    takeWhile(predicate: (x: any) => boolean): list;
    union(xs: Iterable): list;
    union(xs: Iterable, comparer: (x: any, y: any) => boolean): list;
    unshift(...xs: Array<any>): list;
    zip(selector: (x: any) => any, xs: Iterable): list;
    all(): boolean;
    all(predicate: (x: any) => boolean): boolean;
    any(): boolean;
    any(predicate: (x: any) => boolean): boolean;
    contains(val: any): boolean;
    contains(val: any, comparer: (x: any, y: any) => boolean): boolean;
    count(): number;
    count(predicate: (x: any) => boolean): number;
    equals(f: list, comparer: (x: any, y: any) => boolean): boolean;
    findIndex(comparer: (x: any) => boolean): number;
    findLastIndex(comparer: (x: any) => boolean): number;
    first(): any;
    first(predicate: (x: any) => boolean): any;
    foldl(fn: (x: any, accumulator: any) => any, acc: any): any;
    foldr(fn: (x: any, accumulator: any) => any, acc: any): any;
    forEach(fn: (x: any) => void): this;
    indexOf(val: any): number;
    isEmpty(): boolean;
    arrayJoin(): string;
    arrayJoin(delimiter: string): string;
    last(): any;
    last(predicate: (x: any) => boolean): any;
    reduceRight(fn: (x: any, accumulator: any) => any): any;
    reduceRight(fn: (x: any, accumulator: any) => any, acc: any): any;
    toArray(): Array;
    toEvaluatedList(): list;
    toMap(): Map;
    toSet(): Set;
    toString(): string;
    toLocaleString(): string;
    toJSON(): string;
    set(idx: number, val: any): list;
    get(idx: number): any;
    factory: List;
    data: Array;
    extract: Array;
}

interface List<> {
    (source: any): list;
    from(...source: Array<any>): list;
    ordered(source: Iterable, selector: (x: any) => any): list;
    ordered(source: Iterable, selector: (x: any) => any, comparer: (x: any, y: any) => boolean): ordered_list;
    empty(): ordered_list;
    just(val: any): ordered_list;
    unfold(fn: (val: any) => { next: any, value: any, done: boolean }, seed: any): list;
    is(x: any): boolean;
    repeat(item: any, count: number): list;
    extend(prop: string, fn: (...x: Array<any>) => () => any): void;
}